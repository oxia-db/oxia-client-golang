// Copyright 2023-2025 The Oxia Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//*
// OxiaClient

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: client.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OxiaClient_GetShardAssignments_FullMethodName = "/io.oxia.proto.v1.OxiaClient/GetShardAssignments"
	OxiaClient_Write_FullMethodName               = "/io.oxia.proto.v1.OxiaClient/Write"
	OxiaClient_WriteStream_FullMethodName         = "/io.oxia.proto.v1.OxiaClient/WriteStream"
	OxiaClient_Read_FullMethodName                = "/io.oxia.proto.v1.OxiaClient/Read"
	OxiaClient_List_FullMethodName                = "/io.oxia.proto.v1.OxiaClient/List"
	OxiaClient_RangeScan_FullMethodName           = "/io.oxia.proto.v1.OxiaClient/RangeScan"
	OxiaClient_GetSequenceUpdates_FullMethodName  = "/io.oxia.proto.v1.OxiaClient/GetSequenceUpdates"
	OxiaClient_GetNotifications_FullMethodName    = "/io.oxia.proto.v1.OxiaClient/GetNotifications"
	OxiaClient_CreateSession_FullMethodName       = "/io.oxia.proto.v1.OxiaClient/CreateSession"
	OxiaClient_KeepAlive_FullMethodName           = "/io.oxia.proto.v1.OxiaClient/KeepAlive"
	OxiaClient_CloseSession_FullMethodName        = "/io.oxia.proto.v1.OxiaClient/CloseSession"
)

// OxiaClientClient is the client API for OxiaClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Oxia service that allows clients to discover shard-to-server assignments and
// submit batches of requests.
//
// Clients should connect to a random server to discover the shard-to-server
// assignments and then send the actual batched requests to the appropriate
// shard leader. In the future, this may be handled server-side in a proxy
// layer to allows clients to not be concerned with sharding.
type OxiaClientClient interface {
	// *
	// Gets all shard-to-server assignments as a stream. Each set of assignments
	// in the response stream will contain all the assignments to bring the client
	// up to date. For example, if a shard is split, the stream will return a
	// single response containing all the new shard assignments as opposed to
	// multiple stream responses, each containing a single shard assignment.
	//
	// Clients should connect to a single random server which will stream the
	// assignments for all shards on all servers.
	GetShardAssignments(ctx context.Context, in *ShardAssignmentsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ShardAssignments], error)
	// *
	// Batches put, delete and delete_range requests.
	//
	// Clients should send this request to the shard leader. In the future,
	// this may be handled server-side in a proxy layer.
	//
	// Deprecated
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	// *
	// Batches put, delete and delete_range requests.
	//
	// Clients should send this request to the shard leader. In the future,
	// this may be handled server-side in a proxy layer.
	WriteStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WriteRequest, WriteResponse], error)
	// *
	// Batches get requests.
	//
	// Clients should send this request to the shard leader. In the future,
	// this may be handled server-side in a proxy layer.
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadResponse], error)
	// *
	// Requests all the keys between a range of keys.
	//
	// Clients should send an equivalent request to all respective shards,
	// unless a particular partition key was specified.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListResponse], error)
	// *
	// Requests all the records between a range of keys.
	//
	// Clients should send an equivalent request to all respective shards,
	// unless a particular partition key was specified.
	RangeScan(ctx context.Context, in *RangeScanRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RangeScanResponse], error)
	// *
	// Requests all the records between a range of keys.
	GetSequenceUpdates(ctx context.Context, in *GetSequenceUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSequenceUpdatesResponse], error)
	GetNotifications(ctx context.Context, in *NotificationsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NotificationBatch], error)
	// Creates a new client session. Sessions are kept alive by regularly sending
	// heartbeats via the KeepAlive rpc.
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	// Sends a heartbeat to prevent the session from timing out.
	KeepAlive(ctx context.Context, in *SessionHeartbeat, opts ...grpc.CallOption) (*KeepAliveResponse, error)
	// Closes a session and removes all ephemeral values associated with it.
	CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error)
}

type oxiaClientClient struct {
	cc grpc.ClientConnInterface
}

func NewOxiaClientClient(cc grpc.ClientConnInterface) OxiaClientClient {
	return &oxiaClientClient{cc}
}

func (c *oxiaClientClient) GetShardAssignments(ctx context.Context, in *ShardAssignmentsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ShardAssignments], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OxiaClient_ServiceDesc.Streams[0], OxiaClient_GetShardAssignments_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ShardAssignmentsRequest, ShardAssignments]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaClient_GetShardAssignmentsClient = grpc.ServerStreamingClient[ShardAssignments]

func (c *oxiaClientClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, OxiaClient_Write_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oxiaClientClient) WriteStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WriteRequest, WriteResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OxiaClient_ServiceDesc.Streams[1], OxiaClient_WriteStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WriteRequest, WriteResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaClient_WriteStreamClient = grpc.BidiStreamingClient[WriteRequest, WriteResponse]

func (c *oxiaClientClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OxiaClient_ServiceDesc.Streams[2], OxiaClient_Read_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadRequest, ReadResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaClient_ReadClient = grpc.ServerStreamingClient[ReadResponse]

func (c *oxiaClientClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OxiaClient_ServiceDesc.Streams[3], OxiaClient_List_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListRequest, ListResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaClient_ListClient = grpc.ServerStreamingClient[ListResponse]

func (c *oxiaClientClient) RangeScan(ctx context.Context, in *RangeScanRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RangeScanResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OxiaClient_ServiceDesc.Streams[4], OxiaClient_RangeScan_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RangeScanRequest, RangeScanResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaClient_RangeScanClient = grpc.ServerStreamingClient[RangeScanResponse]

func (c *oxiaClientClient) GetSequenceUpdates(ctx context.Context, in *GetSequenceUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSequenceUpdatesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OxiaClient_ServiceDesc.Streams[5], OxiaClient_GetSequenceUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetSequenceUpdatesRequest, GetSequenceUpdatesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaClient_GetSequenceUpdatesClient = grpc.ServerStreamingClient[GetSequenceUpdatesResponse]

func (c *oxiaClientClient) GetNotifications(ctx context.Context, in *NotificationsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NotificationBatch], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OxiaClient_ServiceDesc.Streams[6], OxiaClient_GetNotifications_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NotificationsRequest, NotificationBatch]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaClient_GetNotificationsClient = grpc.ServerStreamingClient[NotificationBatch]

func (c *oxiaClientClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, OxiaClient_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oxiaClientClient) KeepAlive(ctx context.Context, in *SessionHeartbeat, opts ...grpc.CallOption) (*KeepAliveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeepAliveResponse)
	err := c.cc.Invoke(ctx, OxiaClient_KeepAlive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oxiaClientClient) CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseSessionResponse)
	err := c.cc.Invoke(ctx, OxiaClient_CloseSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OxiaClientServer is the server API for OxiaClient service.
// All implementations must embed UnimplementedOxiaClientServer
// for forward compatibility.
//
// *
// Oxia service that allows clients to discover shard-to-server assignments and
// submit batches of requests.
//
// Clients should connect to a random server to discover the shard-to-server
// assignments and then send the actual batched requests to the appropriate
// shard leader. In the future, this may be handled server-side in a proxy
// layer to allows clients to not be concerned with sharding.
type OxiaClientServer interface {
	// *
	// Gets all shard-to-server assignments as a stream. Each set of assignments
	// in the response stream will contain all the assignments to bring the client
	// up to date. For example, if a shard is split, the stream will return a
	// single response containing all the new shard assignments as opposed to
	// multiple stream responses, each containing a single shard assignment.
	//
	// Clients should connect to a single random server which will stream the
	// assignments for all shards on all servers.
	GetShardAssignments(*ShardAssignmentsRequest, grpc.ServerStreamingServer[ShardAssignments]) error
	// *
	// Batches put, delete and delete_range requests.
	//
	// Clients should send this request to the shard leader. In the future,
	// this may be handled server-side in a proxy layer.
	//
	// Deprecated
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	// *
	// Batches put, delete and delete_range requests.
	//
	// Clients should send this request to the shard leader. In the future,
	// this may be handled server-side in a proxy layer.
	WriteStream(grpc.BidiStreamingServer[WriteRequest, WriteResponse]) error
	// *
	// Batches get requests.
	//
	// Clients should send this request to the shard leader. In the future,
	// this may be handled server-side in a proxy layer.
	Read(*ReadRequest, grpc.ServerStreamingServer[ReadResponse]) error
	// *
	// Requests all the keys between a range of keys.
	//
	// Clients should send an equivalent request to all respective shards,
	// unless a particular partition key was specified.
	List(*ListRequest, grpc.ServerStreamingServer[ListResponse]) error
	// *
	// Requests all the records between a range of keys.
	//
	// Clients should send an equivalent request to all respective shards,
	// unless a particular partition key was specified.
	RangeScan(*RangeScanRequest, grpc.ServerStreamingServer[RangeScanResponse]) error
	// *
	// Requests all the records between a range of keys.
	GetSequenceUpdates(*GetSequenceUpdatesRequest, grpc.ServerStreamingServer[GetSequenceUpdatesResponse]) error
	GetNotifications(*NotificationsRequest, grpc.ServerStreamingServer[NotificationBatch]) error
	// Creates a new client session. Sessions are kept alive by regularly sending
	// heartbeats via the KeepAlive rpc.
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	// Sends a heartbeat to prevent the session from timing out.
	KeepAlive(context.Context, *SessionHeartbeat) (*KeepAliveResponse, error)
	// Closes a session and removes all ephemeral values associated with it.
	CloseSession(context.Context, *CloseSessionRequest) (*CloseSessionResponse, error)
	mustEmbedUnimplementedOxiaClientServer()
}

// UnimplementedOxiaClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOxiaClientServer struct{}

func (UnimplementedOxiaClientServer) GetShardAssignments(*ShardAssignmentsRequest, grpc.ServerStreamingServer[ShardAssignments]) error {
	return status.Errorf(codes.Unimplemented, "method GetShardAssignments not implemented")
}
func (UnimplementedOxiaClientServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedOxiaClientServer) WriteStream(grpc.BidiStreamingServer[WriteRequest, WriteResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WriteStream not implemented")
}
func (UnimplementedOxiaClientServer) Read(*ReadRequest, grpc.ServerStreamingServer[ReadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedOxiaClientServer) List(*ListRequest, grpc.ServerStreamingServer[ListResponse]) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOxiaClientServer) RangeScan(*RangeScanRequest, grpc.ServerStreamingServer[RangeScanResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RangeScan not implemented")
}
func (UnimplementedOxiaClientServer) GetSequenceUpdates(*GetSequenceUpdatesRequest, grpc.ServerStreamingServer[GetSequenceUpdatesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetSequenceUpdates not implemented")
}
func (UnimplementedOxiaClientServer) GetNotifications(*NotificationsRequest, grpc.ServerStreamingServer[NotificationBatch]) error {
	return status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedOxiaClientServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedOxiaClientServer) KeepAlive(context.Context, *SessionHeartbeat) (*KeepAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedOxiaClientServer) CloseSession(context.Context, *CloseSessionRequest) (*CloseSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (UnimplementedOxiaClientServer) mustEmbedUnimplementedOxiaClientServer() {}
func (UnimplementedOxiaClientServer) testEmbeddedByValue()                    {}

// UnsafeOxiaClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OxiaClientServer will
// result in compilation errors.
type UnsafeOxiaClientServer interface {
	mustEmbedUnimplementedOxiaClientServer()
}

func RegisterOxiaClientServer(s grpc.ServiceRegistrar, srv OxiaClientServer) {
	// If the following call pancis, it indicates UnimplementedOxiaClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OxiaClient_ServiceDesc, srv)
}

func _OxiaClient_GetShardAssignments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShardAssignmentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OxiaClientServer).GetShardAssignments(m, &grpc.GenericServerStream[ShardAssignmentsRequest, ShardAssignments]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaClient_GetShardAssignmentsServer = grpc.ServerStreamingServer[ShardAssignments]

func _OxiaClient_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OxiaClientServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OxiaClient_Write_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OxiaClientServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OxiaClient_WriteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OxiaClientServer).WriteStream(&grpc.GenericServerStream[WriteRequest, WriteResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaClient_WriteStreamServer = grpc.BidiStreamingServer[WriteRequest, WriteResponse]

func _OxiaClient_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OxiaClientServer).Read(m, &grpc.GenericServerStream[ReadRequest, ReadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaClient_ReadServer = grpc.ServerStreamingServer[ReadResponse]

func _OxiaClient_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OxiaClientServer).List(m, &grpc.GenericServerStream[ListRequest, ListResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaClient_ListServer = grpc.ServerStreamingServer[ListResponse]

func _OxiaClient_RangeScan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RangeScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OxiaClientServer).RangeScan(m, &grpc.GenericServerStream[RangeScanRequest, RangeScanResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaClient_RangeScanServer = grpc.ServerStreamingServer[RangeScanResponse]

func _OxiaClient_GetSequenceUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSequenceUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OxiaClientServer).GetSequenceUpdates(m, &grpc.GenericServerStream[GetSequenceUpdatesRequest, GetSequenceUpdatesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaClient_GetSequenceUpdatesServer = grpc.ServerStreamingServer[GetSequenceUpdatesResponse]

func _OxiaClient_GetNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OxiaClientServer).GetNotifications(m, &grpc.GenericServerStream[NotificationsRequest, NotificationBatch]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaClient_GetNotificationsServer = grpc.ServerStreamingServer[NotificationBatch]

func _OxiaClient_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OxiaClientServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OxiaClient_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OxiaClientServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OxiaClient_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionHeartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OxiaClientServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OxiaClient_KeepAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OxiaClientServer).KeepAlive(ctx, req.(*SessionHeartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _OxiaClient_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OxiaClientServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OxiaClient_CloseSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OxiaClientServer).CloseSession(ctx, req.(*CloseSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OxiaClient_ServiceDesc is the grpc.ServiceDesc for OxiaClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OxiaClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.oxia.proto.v1.OxiaClient",
	HandlerType: (*OxiaClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _OxiaClient_Write_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _OxiaClient_CreateSession_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _OxiaClient_KeepAlive_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _OxiaClient_CloseSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetShardAssignments",
			Handler:       _OxiaClient_GetShardAssignments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteStream",
			Handler:       _OxiaClient_WriteStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _OxiaClient_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "List",
			Handler:       _OxiaClient_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RangeScan",
			Handler:       _OxiaClient_RangeScan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSequenceUpdates",
			Handler:       _OxiaClient_GetSequenceUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetNotifications",
			Handler:       _OxiaClient_GetNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "client.proto",
}
